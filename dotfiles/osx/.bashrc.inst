# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
# window title
function window_title() {
	#echo -ne "\033]0;\u@\h: \W\007"
	#echo -n -e "\033]0;${PWD##*/}\007"
	echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"
}

# Synchronize history between bash sessions
#
# Make history from other terminals available to the current one. However,
# don't mix all histories together - make sure that *all* commands from the
# current session are on top of its history, so that pressing up arrow will
# give you most recent command from this session, not from any session.
#
# Since history is saved on each prompt, this additionally protects it from
# terminal crashes.
# stolen shamelessly: https://gist.github.com/jan-warchol/89f5a748f7e8a2c9e91c9bc1b358d3ec

# keep unlimited shell history because it's very useful
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTFILESIZE=-1
export HISTSIZE=-1
shopt -s histappend   # don't overwrite history file after each session


# on every prompt, save new history to dedicated file and recreate full history
# by reading all files, always keeping history from current session on top.
update_history () {
  history -a ${HISTFILE}.$$
  history -c
  history -r  # load common history file
  # load histories of other sessions
  for f in `ls ${HISTFILE}.[0-9]* 2>/dev/null | grep -v "${HISTFILE}.$$\$"`; do
    history -r $f
  done
  history -r "${HISTFILE}.$$"  # load current session history
}
if [[ "$PROMPT_COMMAND" != *update_history* ]]; then
  export PROMPT_COMMAND="update_history; $PROMPT_COMMAND"
fi

# merge session history into main history file on bash exit
merge_session_history () {
  if [ -e ${HISTFILE}.$$ ]; then
    cat ${HISTFILE}.$$ >> $HISTFILE
    \rm ${HISTFILE}.$$
  fi
}
trap merge_session_history EXIT

# detect leftover files from crashed sessions and merge them back
active_shells=$(pgrep `ps -p $$ -o comm= | cut -b 2-`)
grep_pattern=`for pid in $active_shells; do echo -n "-e \.${pid}\$ "; done`

if [ -n "${grep_pattern}" ]; then
  orphaned_files=`ls $HISTFILE.[0-9]* 2>/dev/null | grep -v $grep_pattern`
  if [ -n "$orphaned_files" ]; then
    echo Merging orphaned history files:
    for f in $orphaned_files; do
      echo "  `basename $f`"
      cat $f >> $HISTFILE
      \rm $f
    done
    echo "done."
  fi
fi

# vaulted prompt
function vaulted_prompt() {
  if [ -n "$VAULTED_ENV" ]; then
    which datediff >& /dev/null
    if [ $? -eq 0 ]; then
      VAULTED_PROMPT='\[\033[00m\][\[\033[01;92m\] vault: \[\033[01;37;1;44m\]${VAULTED_ENV}\[\033[00m\] || \[\033[01;92m\]expires: \[\033[01;36m\]$(datediff now ${VAULTED_ENV_EXPIRATION} -f%Hh\ %Mm) \[\033[00m\]]\n'
    else
      VAULTED_PROMPT='\[\033[00m\][\[\033[01;92m\] vault: \[\033[01;37;1;44m\]${VAULTED_ENV}\[\033[00m\] || \[\033[01;92m\]expires: \[\033[01;36m\]$(date -d ${VAULTED_ENV_EXPIRATION} +%r) \[\033[00m\]]\n'
    fi
    echo ${VAULTED_PROMPT}
  fi
}

# rapture prompt
function rapture_prompt() {
  if [ -n "$RAPTURE_ROLE" ]; then
    RAPTURE_PROMPT='\[\033[00m\][\[\033[01;92m\] Assumed Role: \[\033[01;31m\]${RAPTURE_ROLE} \[\033[00m\]]\n'
    echo ${RAPTURE_PROMPT}
  fi
}

# wrap in a function so we can use it in PROMPT_COMMAND
function set_bash_prompt() {
# colour branch name depending on state
if [[ "$(__git_ps1)" =~ "*" ]]; then     # if repository is dirty
  __git_branch_color="\[\033[0;31m\]"    # make the git part of the prompt red
elif [[ "$(__git_ps1)" =~ "$" ]]; then   # if there is something stashed
  __git_branch_color="\[\033[1;33m\]"    # make it yellow
elif [[ "$(__git_ps1)" =~ "%" ]]; then   # if there are only untracked files
  __git_branch_color="\[\033[0;35m\]"    # make it magenta
elif [[ "$(__git_ps1)" =~ "+" ]]; then   # if there are staged files
  __git_branch_color="\[\033[0;36m\]"    # make it cyan
else
  __git_branch_color="\[\033[00;32m\]"   # otherwise, green!
fi

  PS1="$(vaulted_prompt)$(rapture_prompt)\[\033[01;33m\]\u\[\033[00m\]@\[\033[01;34m\]\h\[\033[00m\] [\[\033[01;36m\]\W\[\033[00m\]]${__git_branch_color}$(__git_ps1)\[\033[00m\] \$ "
}

# change some options for __git_ps1
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_HIDE_IF_PWD_IGNORED=true
export GIT_PS1_SHOWCOLORHINTS=true
  
# set PS1 depending on terminal
if [ "$TERM" == "xterm-256color" ]; then
  if [[ "$PROMPT_COMMAND" != set_bash_prompt* ]]; then
    export PROMPT_COMMAND="set_bash_prompt; $PROMPT_COMMAND"
  fi
else
  PS1="[\u@\h \W]\\$ "
fi

# path
export PATH=$PATH:$HOME/bin:$HOME/.local/bin

# ls colors
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

# rapture
which rapture >& /dev/null && eval "$( command rapture shell-init )"

# awless
which awless >& /dev/null
if [ $? -eq 0 ]; then
  source <(awless completion bash)
fi

# terraform bash completion
which terraform >& /dev/null
if [ $? -eq 0 ]; then
  complete -C $(which terraform) terraform
fi

# jira bash completion
which jira >& /dev/null
if [ $? -eq 0 ]; then
  eval "$(jira --completion-script-bash)"
fi

# vault bash completion
if [ -f /home/bbrown/bin/vault ]; then
  complete -C /home/bbrown/bin/vault vault
fi

# chruby
[ -f /usr/local/share/chruby/chruby.sh ] && . /usr/local/share/chruby/chruby.sh

# dinghy
which dinghy >& /dev/null
[ $? -eq 0 ] && eval $(dinghy env)

# aliases
alias ls="ls --color"
alias npw="pwgen 8 1"
alias sshnosave="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias aws-regions="aws --region us-west-2 ec2 describe-regions --output table"
alias vault_auth='vault login -method=ldap username=bbrown'
alias gerrit_push='git push origin HEAD:refs/for/master'

# variables
export ANSIBLE_VAULT_PASSWORD_FILE=$HOME/git/inst/rundmc/.vault-pass.key
export VAULT_ADDR=https://vault.insops.net
